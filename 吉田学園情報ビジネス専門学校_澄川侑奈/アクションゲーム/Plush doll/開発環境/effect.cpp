//--------------------------------------------------------------------------------
//
//	エフェクトの処理 [effect.h]
//	Author:Yuna Sumikawa
//
//--------------------------------------------------------------------------------
#include "effect.h"			// エフェクト
#include "manager.h"		// マネージャー
#include "renderer.h"		// レンダラ
#include "scene2D.h"		// 2Dポリゴン
#include "player.h"			// プレイヤー
#include "game.h"

//-------------------------------------------------------------------------------
// マクロ定義
//-------------------------------------------------------------------------------

//-------------------------------------------------------------------------------
// 静的メンバ変数宣言
//-------------------------------------------------------------------------------
LPDIRECT3DTEXTURE9 CEffect::m_apTexture = {};

//-------------------------------------------------------------------------------
// テクスチャの読み込み
//-------------------------------------------------------------------------------
HRESULT CEffect::Load(void)
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = CManager::GetRenderer()->GetDevice();

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice, "data/TEXTURE/Fog001.png", &m_apTexture);

	return S_OK;
}

//-------------------------------------------------------------------------------
// テクスチャを破棄
//-------------------------------------------------------------------------------
void CEffect::Unload(void)
{
	//テクスチャの開放
	if (m_apTexture != NULL)
	{
		m_apTexture->Release();
		m_apTexture = NULL;
	}
}

//-------------------------------------------------------------------------------
// エフェクトの生成
//-------------------------------------------------------------------------------
CEffect *CEffect::Create(D3DXVECTOR3 pos, D3DXVECTOR3 scale)
{
	// 変数宣言
	CEffect *pEffect = NULL;

	if (pEffect == NULL)
	{// 中にデータが何もなかったら
		// 動的確保
		pEffect = new CEffect;

		if (pEffect != NULL)
		{// 中にデータがあったら
			// 初期化処理を呼び出す
			pEffect->Init(pos, scale);

			// テクスチャを割り当てる
			pEffect->BindTexture(m_apTexture);
		}
	}
	// 値を返す
	return pEffect;
}

//-------------------------------------------------------------------------------
// コンストラク
//-------------------------------------------------------------------------------
CEffect::CEffect(PRIORITY nPriority) :CScene2D(nPriority)
{
	// 初期化
	m_scale = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_move = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
}

//-------------------------------------------------------------------------------
// デストラクタ
//-------------------------------------------------------------------------------
CEffect::~CEffect()
{
}

//-------------------------------------------------------------------------------
// 初期化処理
//-------------------------------------------------------------------------------
HRESULT CEffect::Init(D3DXVECTOR3 pos, D3DXVECTOR3 scale)
{
	// 初期化
	m_scale = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_move = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

	// 2Dポリゴンの初期化処理を呼び出す
	CScene2D::Init(pos, scale);

	return S_OK;
}

//-------------------------------------------------------------------------------
// エフェクトの終了処理
//-------------------------------------------------------------------------------
void CEffect::Uninit(void)
{
	// 2Dポリゴンの終了処理を呼び出す
	CScene2D::Uninit();
}

//-------------------------------------------------------------------------------
// エフェクトの更新処理
//-------------------------------------------------------------------------------
void CEffect::Update(void)
{

}

//-------------------------------------------------------------------------------
// エフェクトの描画処理
//-------------------------------------------------------------------------------
void CEffect::Draw(void)
{
	// 2Dポリゴンの描画処理を呼び出す
	CScene2D::Draw();
}