//--------------------------------------------------------------------------------
//
//	スコア処理 [score.cpp]
//	Author:Yuna Sumikawa
//
//--------------------------------------------------------------------------------
#include "score.h"			// スコア

//-------------------------------------------------------------------------------
// 静的メンバ変数宣言
//-------------------------------------------------------------------------------
int CScore::m_nScore = NULL;
CNumber *CScore::m_apNumber[MAX_NUMBER] = {};

//-------------------------------------------------------------------------------
// コンストラク
//-------------------------------------------------------------------------------
CScore::CScore(PRIORITY nPriority) :CScene(nPriority)
{
	int nScore = 0;
}

//-------------------------------------------------------------------------------
// デストラクタ
//-------------------------------------------------------------------------------
CScore::~CScore()
{
}

//-------------------------------------------------------------------------------
// スコアの生成
//-------------------------------------------------------------------------------
CScore *CScore::Create(D3DXVECTOR3 pos, D3DXVECTOR3 scale)
{
	CScore *pScore = NULL;

	if (pScore == NULL)
	{// NULLだったら
		// 動的確保
		pScore = new CScore;

		if (pScore != NULL)
		{// NULLじゃなかったら
			// 初期化処理を呼び出す
			pScore->Init(pos, scale);
		}
	}
	// 値を返す
	return pScore;
}

//-------------------------------------------------------------------------------
// 初期化処理
//-------------------------------------------------------------------------------
HRESULT CScore::Init(D3DXVECTOR3 pos, D3DXVECTOR3 scale)
{
	for (int nCnt = 0; nCnt < MAX_NUMBER; nCnt++)
	{// 8つ分並べる処理
		m_apNumber[nCnt] = CNumber::Create(D3DXVECTOR3((pos.x - (NUMBER_WIDTH * NUMBER_HALF) + (NUMBER_WIDTH * nCnt)) + (NUMBER_WIDTH / 2.0f),
													  (pos.y), 0.0f), D3DXVECTOR3(NUMBER_WIDTH, NUMBER_HEIGHT, 0));
	}

	// 初期化
	m_nScore = 0;

	return S_OK;
}

//-------------------------------------------------------------------------------
// 終了処理
//-------------------------------------------------------------------------------
void CScore::Uninit(void)
{
	for (int nCnt = 0; nCnt < MAX_NUMBER; nCnt++)
	{
		if (m_apNumber[nCnt] != NULL)
		{// NULLじゃなかったら
			m_apNumber[nCnt]->Uninit();
			delete m_apNumber[nCnt];
			m_apNumber[nCnt] = NULL;
		}
	}
	Release();
}

//-------------------------------------------------------------------------------
// 更新処理
//-------------------------------------------------------------------------------
void CScore::Update(void)
{

}

//-------------------------------------------------------------------------------
// 描画処理
//-------------------------------------------------------------------------------
void CScore::Draw(void)
{
	for (int nCnt = 0; nCnt < MAX_NUMBER; nCnt++)
	{
		m_apNumber[nCnt]->Draw();
	}
}

//-------------------------------------------------------------------------------
// スコアの設定
//-------------------------------------------------------------------------------
void CScore::SetScore(int nScore)
{
	// 変数宣言
	int nNumber[MAX_NUMBER];
	int nMath = 100000000;		// 桁数

	for (int nCnt = 0; nCnt < MAX_NUMBER; nCnt++)
	{
		nNumber[nCnt] = SCORE_MATH;
		m_apNumber[nCnt]->SetNumber(nNumber[nCnt]);
		nMath /= 10;
	}
}

//-------------------------------------------------------------------------------
//	スコア加算の処理
// nValue : 加算するスコア 
//-------------------------------------------------------------------------------
void CScore::AddScore(int nValue)
{
	// 加算
	m_nScore += nValue;
	SetScore(m_nScore);
}

//-------------------------------------------------------------------------------
// スコアを取得
//-------------------------------------------------------------------------------
int CScore::GetScore(void)
{
	// スコアの情報の先頭アドレスを返す
	return m_nScore;
}