//--------------------------------------------------------------------------------
//
//	パーティクルの処理 [particle.h]
//	Author:Yuna Sumikawa
//
//--------------------------------------------------------------------------------
#include "particle.h"		// パーティクル
#include "manager.h"		// マネージャー
#include "renderer.h"		// レンダラ

//-------------------------------------------------------------------------------
// マクロ定義
//-------------------------------------------------------------------------------

//-------------------------------------------------------------------------------
// 静的メンバ変数宣言
//-------------------------------------------------------------------------------
LPDIRECT3DTEXTURE9 CParticl::m_apTexture = {};

//-------------------------------------------------------------------------------
// テクスチャの読み込み
//-------------------------------------------------------------------------------
HRESULT CParticl::Load(void)
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = CManager::GetRenderer()->GetDevice();

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice, "data/TEXTURE/Fog001.png", &m_apTexture);

	return S_OK;
}

//-------------------------------------------------------------------------------
// テクスチャを破棄
//-------------------------------------------------------------------------------
void CParticl::Unload(void)
{
	//テクスチャの開放
	if (m_apTexture != NULL)
	{
		m_apTexture->Release();
		m_apTexture = NULL;
	}
}

//-------------------------------------------------------------------------------
// エフェクトの生成
// pos:位置		size:大きさ		number:出したい個数
//-------------------------------------------------------------------------------
CParticl *CParticl::Create(D3DXVECTOR3 pos, D3DXVECTOR3 size, int number)
{
	// 変数宣言
	CParticl *pParticle = NULL;

	if (pParticle == NULL)
	{// 中にデータが何もなかったら
	 // 動的確保
		pParticle = new CParticl;

		if (pParticle != NULL)
		{// 中にデータがあったら
			// 代入
			pParticle -> m_Pos;
			pParticle -> m_Size;
			pParticle -> m_Number;

			// 初期化処理を呼び出す
			pParticle->Init();
		}
	}


	// 値を返す
	return pParticle;
}

//-------------------------------------------------------------------------------
// コンストラク
//-------------------------------------------------------------------------------
CParticl::CParticl()
{
}

//-------------------------------------------------------------------------------
// デストラクタ
//-------------------------------------------------------------------------------
CParticl::~CParticl()
{
}

//-------------------------------------------------------------------------------
// 初期化処理
//-------------------------------------------------------------------------------
HRESULT CParticl::Init()
{


	return S_OK;
}

//-------------------------------------------------------------------------------
// エフェクトの終了処理
//-------------------------------------------------------------------------------
void CParticl::Uninit(void)
{

}

//-------------------------------------------------------------------------------
// エフェクトの更新処理
//-------------------------------------------------------------------------------
void CParticl::Update(void)
{

}

//-------------------------------------------------------------------------------
// エフェクトの描画処理
//-------------------------------------------------------------------------------
void CParticl::Draw(void)
{

}