//--------------------------------------------------------------------------------
//
//	アイテム処理 [item.cpp]
//	Author:Yuna Sumikawa
//
//--------------------------------------------------------------------------------
#include "item.h"			// アイテム
#include "manager.h"
#include "renderer.h"
#include "polygon.h"
#include "game.h"

//-------------------------------------------------------------------------------
// 静的メンバ変数定義
//-------------------------------------------------------------------------------
LPDIRECT3DTEXTURE9 CItem::m_apTexture[] = {};
bool CItem::m_bdemasita = false;

//-------------------------------------------------------------------------------
// コンストラク
//-------------------------------------------------------------------------------
CItem::CItem(PRIORITY nPriority) :CScene2D(nPriority)
{
	m_size = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_move = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
}

//-------------------------------------------------------------------------------
// デストラクタ
//-------------------------------------------------------------------------------
CItem::~CItem()
{

}

//-------------------------------------------------------------------------------
// テクスチャの読み込み
//-------------------------------------------------------------------------------
HRESULT CItem::Load(void)
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = CManager::GetRenderer()->GetDevice();

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice, "data/TEXTURE/goal.png", &m_apTexture[ITEM_GOAL]);

	return S_OK;
}

//-------------------------------------------------------------------------------
// テクスチャを破棄
//-------------------------------------------------------------------------------
void CItem::Unload(void)
{
	for (int nCnt = 0; nCnt < ITEM_MAX; nCnt++)
	{
		//テクスチャの開放
		if (m_apTexture[nCnt] != NULL)
		{
			m_apTexture[nCnt]->Release();
			m_apTexture[nCnt] = NULL;
		}
	}
}

//-------------------------------------------------------------------------------
// アイテムの生成
//-------------------------------------------------------------------------------
CItem *CItem::Create(D3DXVECTOR3 pos, D3DXVECTOR3 scale)
{
	CItem *pItem = NULL;

	if (pItem == NULL)
	{// NULLだったら
	 // 動的確保
		pItem = new CItem;

		if (pItem != NULL)
		{// NULLじゃなかったら
		 // 初期化処理を呼び出す
			pItem->Init(pos, scale);
		}
	}
	// 値を返す
	return pItem;
}

//-------------------------------------------------------------------------------
// 初期化処理
//-------------------------------------------------------------------------------
HRESULT CItem::Init(D3DXVECTOR3 pos, D3DXVECTOR3 scale)
{
	// 初期化
	m_size = scale;

	// 2Dポリゴンの初期化処理を呼び出す
	CScene2D::Init(pos, scale);

	// オブジェクトタイプをアイテムに設定する
	SetObjType(CScene::OBJTYPE_ITEM);

	// テクスチャの割り当て
	BindTexture(m_apTexture[ITEM_GOAL]);

	return S_OK;
}

//-------------------------------------------------------------------------------
// 終了処理
//-------------------------------------------------------------------------------
void CItem::Uninit(void)
{
	// 2Dポリゴンの終了処理を呼び出す
	CScene2D::Uninit();
}

//-------------------------------------------------------------------------------
// 更新処理
//-------------------------------------------------------------------------------
void CItem::Update(void)
{
	// 位置の取得
	D3DXVECTOR3 Pos;
	Pos = GetPosition();

	if (Pos.x + m_size.x < SCREEN_WIDTH )
	{
		m_bdemasita = true;
	}
	else
	{
		m_bdemasita = false;
	}

	// 情報を渡す
	SetPosition(Pos, m_size);
}

//-------------------------------------------------------------------------------
// 描画処理
//-------------------------------------------------------------------------------
void CItem::Draw(void)
{
	// 2Dポリゴンの描画処理を呼び出す
	CScene2D::Draw();
}